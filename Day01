from sympy import Symbol, divisors, mod_inverse, Poly
from functools import reduce

# Given data - its example data please replace it with your copy and paste data from  https://quilibrium.com/hexmas
points =[[1, 1578096352],[2, 1498940494],[3, 29765241],[4, 1772519600]
,[5, 410498836],[6, 358783149],[7, 1907454352],[8, 1397198078]
,[9, 2132324222],[10, 1671467266]]
modulus = 2147483647

# Lagrange Interpolation in a finite field
def lagrange_interpolation(points, x, modulus):
    def L(i):
        X_i, Y_i = points[i]
        numer = reduce(lambda x, y: x * y, [(x - X_j) % modulus for j, (X_j, _) in enumerate(points) if j != i], 1)
        denom = reduce(lambda x, y: x * y, [(X_i - X_j) % modulus for j, (X_j, _) in enumerate(points) if j != i], 1)
        return Y_i * numer * mod_inverse(denom, modulus) % modulus
    return sum(L(i) for i in range(len(points))) % modulus

# Calculate the secret using any six points
secret = lagrange_interpolation(points[:6], 0, modulus)
secret
